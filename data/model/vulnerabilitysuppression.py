from typing import List
from data.database import User, Repository, Manifest, VulnerabilitySuppression


def create_vulnerability_suppression_for_manifest(
    manifest: Manifest, vulns: List[str]
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given manifest or update if it already exists
    and returns it.
    """
    if len(vulns) == 0:
        raise Exception("No vulnerabilities to suppress supplied")

    # create the vulnerability suppression information for the manifest or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(manifest=manifest, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.manifest),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(manifest=manifest)


def create_vulnerability_suppression_for_repo(
    repository: Repository, vulns: List[str]
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given repository or update if it already exists
    and returns it.
    """

    if len(vulns) == 0:
        raise Exception("No vulnerabilities to suppress supplied")

    # create the vulnerability suppression information for the repository or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(repository=repository, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.repository),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(repository=repository)


def create_vulnerability_suppression_for_org(
    org: User, vulns: List[str]
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given organization or update if it already exists
    and returns it.
    """

    assert org.organization is True

    if len(vulns) == 0:
        raise Exception("No vulnerabilities to suppress supplied")

    # create the vulnerability suppression information for the organization or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(organization=org, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.organization),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(organization=org)


def delete_vulnerability_suppression_for_manifest(manifest: Manifest) -> None:
    """
    Delete a vulnerability suppression for the given manifest.
    """

    # delete the vulnerability suppression information for the manifest
    VulnerabilitySuppression.delete().where(
        VulnerabilitySuppression.manifest == manifest
    ).execute()


def delete_vulnerability_suppression_for_repo(repository: Repository) -> None:
    """
    Delete a vulnerability suppression for the given repository.
    """

    # delete the vulnerability suppression information for the repository
    VulnerabilitySuppression.delete().where(
        VulnerabilitySuppression.repository == repository
    ).execute()


def delete_vulnerability_suppression_for_org(org: User) -> None:
    """
    Delete a vulnerability suppression for the given organization.
    """

    assert org.organization is True

    # delete the vulnerability suppression information for the organization
    VulnerabilitySuppression.delete().where(
        VulnerabilitySuppression.organization == org
    ).execute()

def get_vulnerability_suppression_for_manifest(manifest: Manifest) -> List[str]:
    """
    Get a vulnerability suppression for the given manifest.
    """

    # get the vulnerability suppression information for the manifest
    try:
        suppression = VulnerabilitySuppression.get(manifest=manifest)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []

def get_vulnerability_suppression_for_repo(repository: Repository) -> List[str]:
    """
    Get a vulnerability suppression for the given repository.
    """

    # get the vulnerability suppression information for the repository
    try:
        suppression = VulnerabilitySuppression.get(repository=repository)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []

def get_vulnerability_suppression_for_org(org: User) -> List[str]:
    """
    Get a vulnerability suppression for the given organization.
    """

    assert org.organization is True

    # get the vulnerability suppression information for the organization
    try:
        suppression = VulnerabilitySuppression.get(organization=org)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []
