from typing import List, Union
from data.database import User, Repository, Manifest, VulnerabilitySuppression
from data.model import InvalidVulnerabilitySuppression
from data.registry_model.datatypes import Manifest as ManifestDatatype
from data.registry_model.datatypes import RepositoryReference


def _validate_vulns(vulns: List[str]) -> None:
    if len(vulns) == 0:
        raise InvalidVulnerabilitySuppression("No vulnerabilities to suppress supplied")

    if any(len(vuln) == 0 for vuln in vulns):
        raise InvalidVulnerabilitySuppression("Vulnerability names cannot be empty")

    if any(vuln.strip() != vuln for vuln in vulns):
        raise InvalidVulnerabilitySuppression(
            "Vulnerability names cannot have leading or trailing whitespace characters"
        )


def create_vulnerability_suppression_for_manifest(
    manifest: Union[Manifest, ManifestDatatype], vulns: List[str], raise_on_error: bool = False
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given manifest or update if it already exists
    and returns it.
    """

    if isinstance(manifest, ManifestDatatype):
        manifest = Manifest.get(id=manifest.id)

    try:
        _validate_vulns(vulns)
    except InvalidVulnerabilitySuppression as e:
        if raise_on_error:
            raise e

    # create the vulnerability suppression information for the manifest or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(manifest=manifest, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.manifest),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(manifest=manifest)


def create_vulnerability_suppression_for_repo(
    repository: Union[Repository, RepositoryReference], vulns: List[str], raise_on_error: bool = False
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given repository or update if it already exists
    and returns it.
    """

    if isinstance(repository, RepositoryReference):
        repository = Repository.get(id=repository.id)

    try:
        _validate_vulns(vulns)
    except InvalidVulnerabilitySuppression as e:
        if raise_on_error:
            raise e

    # create the vulnerability suppression information for the repository or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(repository=repository, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.repository),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(repository=repository)


def create_vulnerability_suppression_for_org(
    org: User, vulns: List[str], raise_on_error: bool = False
) -> VulnerabilitySuppression:
    """
    Create a vulnerability suppression for the given organization or update if it already exists
    and returns it.
    """

    assert org.organization is True

    try:
        _validate_vulns(vulns)
    except InvalidVulnerabilitySuppression as e:
        if raise_on_error:
            raise e

    # create the vulnerability suppression information for the organization or update if one already exists
    insert = (
        VulnerabilitySuppression.insert(organization=org, vulnerability_names=vulns)
        .on_conflict(
            conflict_target=(VulnerabilitySuppression.organization),
            update={VulnerabilitySuppression.vulnerability_names: vulns},
        )
        .execute()
    )

    if insert == 0:
        raise Exception("Failed to create vulnerability suppression")

    return VulnerabilitySuppression.get(organization=org)


def delete_vulnerability_suppression_for_manifest(manifest: Union[Manifest, ManifestDatatype]) -> None:
    """
    Delete a vulnerability suppression for the given manifest.
    """

    if isinstance(manifest, ManifestDatatype):
        manifest = Manifest.get(id=manifest.id)

    # delete the vulnerability suppression information for the manifest
    rows_deleted = VulnerabilitySuppression.delete().where(VulnerabilitySuppression.manifest == manifest).execute()

    if rows_deleted == 0:
        raise Exception("Failed to delete vulnerability suppressions")


def delete_vulnerability_suppression_for_repo(repository: Union[Repository, RepositoryReference]) -> None:
    """
    Delete a vulnerability suppression for the given repository.
    """

    if isinstance(repository, RepositoryReference):
        repository = Repository.get(id=repository.id)

    # delete the vulnerability suppression information for the repository
    rows_deleted = VulnerabilitySuppression.delete().where(
        VulnerabilitySuppression.repository == repository
    ).execute()

    if rows_deleted == 0:
        raise Exception("Failed to delete vulnerability suppressions")


def delete_vulnerability_suppression_for_org(org: User) -> None:
    """
    Delete a vulnerability suppression for the given organization.
    """

    assert org.organization is True

    # delete the vulnerability suppression information for the organization
    rows_deleted = VulnerabilitySuppression.delete().where(VulnerabilitySuppression.organization == org).execute()

    if rows_deleted == 0:
        raise Exception("Failed to delete vulnerability suppressions")


def get_vulnerability_suppression_for_manifest(manifest: Union[Manifest, ManifestDatatype]) -> List[str]:
    """
    Get a vulnerability suppression for the given manifest.
    """

    if isinstance(manifest, ManifestDatatype):
        manifest = Manifest.get(id=manifest.id)

    # get the vulnerability suppression information for the manifest
    try:
        suppression = VulnerabilitySuppression.get(manifest=manifest)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []


def get_vulnerability_suppression_for_repo(repository: Union[Repository, RepositoryReference]) -> List[str]:
    """
    Get a vulnerability suppression for the given repository.
    """

    if isinstance(repository, RepositoryReference):
        repository = Repository.get(id=repository.id)

    # get the vulnerability suppression information for the repository
    try:
        suppression = VulnerabilitySuppression.get(repository=repository)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []


def get_vulnerability_suppression_for_org(org: User) -> List[str]:
    """
    Get a vulnerability suppression for the given organization.
    """

    assert org.organization is True

    # get the vulnerability suppression information for the organization
    try:
        suppression = VulnerabilitySuppression.get(organization=org)
        return suppression.vulnerability_names
    except VulnerabilitySuppression.DoesNotExist:
        return []
