from typing import List
import pytest
from data.model import user, repository
from data.model.oci import tag as oci_tag
from data.database import Manifest, Repository, User
from data.model import InvalidVulnerabilitySuppression, vulnerabilitysuppression

from test.fixtures import *


@pytest.mark.parametrize(
    "entity, create_func",
    [
        (Manifest, vulnerabilitysuppression.create_vulnerability_suppression_for_manifest),
        (User, vulnerabilitysuppression.create_vulnerability_suppression_for_org),
        (Repository, vulnerabilitysuppression.create_vulnerability_suppression_for_repo),
    ],
)
def test_create_vulnerability_suppression(initialized_db, entity, create_func):
    """
    Test that we can create a vulnerability suppression for a manifest.
    """

    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]

    suppression = create_func(obj, vulns)

    assert (
        suppression.manifest == obj
        or suppression.organization == obj
        or suppression.repository == obj
    )
    assert suppression.vulnerability_names == vulns

    # try to overwrite the suppressions

    vulns = ["CVE-2019-100002", "CVE-2019-100003"]

    suppression = create_func(obj, vulns)

    assert (
        suppression.manifest == obj
        or suppression.organization == obj
        or suppression.repository == obj
    )
    assert suppression.vulnerability_names == vulns


@pytest.mark.parametrize(
    "entity, create_func",
    [
        (Manifest, vulnerabilitysuppression.create_vulnerability_suppression_for_manifest),
        (User, vulnerabilitysuppression.create_vulnerability_suppression_for_org),
        (Repository, vulnerabilitysuppression.create_vulnerability_suppression_for_repo),
    ],
)
def test_create_invalid_vulnerability_suppression(initialized_db, entity, create_func):
    """
    Test that we can create a vulnerability suppression for a manifest.
    """

    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    # try to create an empty suppression
    empty_vulns = []

    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, empty_vulns, raise_on_error=True)

    # try to create zero-character suppressions

    empty_vulns = ["", ""]
    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, empty_vulns, raise_on_error=True)

    # try to create a suppression with lead and trailing whitespace
    whitespace_vulns = [" CVE-2019-100001", "CVE-2019-100002 "]
    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, whitespace_vulns, raise_on_error=True)


@pytest.mark.parametrize(
    "entity, create_func, get_func",
    [
        (
            Manifest,
            vulnerabilitysuppression.create_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.get_vulnerability_suppression_for_manifest,
        ),
        (
            User,
            vulnerabilitysuppression.create_vulnerability_suppression_for_org,
            vulnerabilitysuppression.get_vulnerability_suppression_for_org,
        ),
        (
            Repository,
            vulnerabilitysuppression.create_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.get_vulnerability_suppression_for_repo,
        ),
    ],
)
def test_get_vulnerability_suppression(initialized_db, entity, create_func, get_func):
    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]
    create_func(obj, vulns)

    assert get_func(obj) == vulns


@pytest.mark.parametrize(
    "entity, create_func, get_func, delete_func",
    [
        (
            Manifest,
            vulnerabilitysuppression.create_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.get_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_manifest,
        ),
        (
            User,
            vulnerabilitysuppression.create_vulnerability_suppression_for_org,
            vulnerabilitysuppression.get_vulnerability_suppression_for_org,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_org,
        ),
        (
            Repository,
            vulnerabilitysuppression.create_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.get_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_repo,
        ),
    ],
)
def test_delete_vulnerability_suppression(
    initialized_db, entity, create_func, get_func, delete_func
):
    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]
    suppression = create_func(obj, vulns)

    assert suppression.vulnerability_names == vulns

    delete_func(obj)

    assert get_func(obj) == []


@pytest.mark.parametrize(
    "org_vulns, repo_vulns, manifest_vulns",
    [
        (
            ["CVE-2019-100001", "CVE-2019-100002", "CVE-2019-100003"],
            ["CVE-2019-100004", "CVE-2019-100005"],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
        ),
        (
            ["CVE-2019-100001", "CVE-2019-100002", "CVE-2019-100004"],
            ["CVE-2019-100004", "CVE-2019-100007"],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
        ),
        (
            [],
            ["CVE-2019-100004", "CVE-2019-100005"],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
        ),
        (
            ["CVE-2019-100001", "CVE-2019-100002", "CVE-2019-100003"],
            [],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
        ),
        (
            ["CVE-2019-100001", "CVE-2019-100002", "CVE-2019-100003"],
            ["CVE-2019-100004", "CVE-2019-100005"],
            [],
        ),
        (
            [],
            [],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
        ),
        (
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
            [],
            [],
        ),
        (
            [],
            ["CVE-2019-100006", "CVE-2019-100007", "CVE-2019-100008"],
            [],
        ),
    ],
)
def test_derive_vulnerability_suppression(
    initialized_db, org_vulns: List[str], repo_vulns: List[str], manifest_vulns: List[str]
):
    org = user.get_user_or_org("buynlarge")
    repo = repository.get_repository("buynlarge", "orgrepo")
    tag = oci_tag.get_tag(repo.id, "latest")
    manifest = tag.manifest
    expected_vulns = list()

    if len(manifest_vulns) > 0:
        vulnerabilitysuppression.create_vulnerability_suppression_for_manifest(
            manifest, manifest_vulns, raise_on_error=True
        )
        expected_vulns.extend([(vuln, "manifest") for vuln in manifest_vulns])

    if len(repo_vulns) > 0:
        vulnerabilitysuppression.create_vulnerability_suppression_for_repo(
            repo, repo_vulns, raise_on_error=True
        )
        expected_vulns.extend([(vuln, "repository") for vuln in repo_vulns])

    if len(org_vulns) > 0:
        vulnerabilitysuppression.create_vulnerability_suppression_for_org(
            org, org_vulns, raise_on_error=True
        )
        expected_vulns.extend([(vuln, "organization") for vuln in org_vulns])

    derived_vulns = vulnerabilitysuppression.derive_vulnerability_suppressions(manifest)

    assert set(derived_vulns) == set(expected_vulns)
