import py
import pytest
from requests import delete
from data.database import Manifest, Repository, User
from data.model import InvalidVulnerabilitySuppression, vulnerabilitysuppression

from test.fixtures import *


@pytest.mark.parametrize(
    "entity, create_func",
    [
        (Manifest, vulnerabilitysuppression.create_vulnerability_suppression_for_manifest),
        (User, vulnerabilitysuppression.create_vulnerability_suppression_for_org),
        (Repository, vulnerabilitysuppression.create_vulnerability_suppression_for_repo),
    ],
)
def test_create_vulnerability_suppression(initialized_db, entity, create_func):
    """
    Test that we can create a vulnerability suppression for a manifest.
    """

    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]

    suppression = create_func(obj, vulns)

    assert (
        suppression.manifest == obj
        or suppression.organization == obj
        or suppression.repository == obj
    )
    assert suppression.vulnerability_names == vulns

    # try to overwrite the suppressions

    vulns = ["CVE-2019-100002", "CVE-2019-100003"]

    suppression = create_func(obj, vulns)

    assert (
        suppression.manifest == obj
        or suppression.organization == obj
        or suppression.repository == obj
    )
    assert suppression.vulnerability_names == vulns

@pytest.mark.parametrize(
    "entity, create_func",
    [
        (Manifest, vulnerabilitysuppression.create_vulnerability_suppression_for_manifest),
        (User, vulnerabilitysuppression.create_vulnerability_suppression_for_org),
        (Repository, vulnerabilitysuppression.create_vulnerability_suppression_for_repo),
    ],
)
def test_create_invalid_vulnerability_suppression(initialized_db, entity, create_func):
    """
    Test that we can create a vulnerability suppression for a manifest.
    """

    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    # try to create an empty suppression
    empty_vulns = []

    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, empty_vulns, raise_on_error=True)

    # try to create zero-character suppressions

    empty_vulns = ["", ""]
    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, empty_vulns, raise_on_error=True)

    # try to create a suppression with lead and trailing whitespace
    whitespace_vulns = [" CVE-2019-100001", "CVE-2019-100002 "]
    with pytest.raises(InvalidVulnerabilitySuppression):
        create_func(obj, whitespace_vulns, raise_on_error=True)


@pytest.mark.parametrize(
    "entity, create_func, get_func",
    [
        (
            Manifest,
            vulnerabilitysuppression.create_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.get_vulnerability_suppression_for_manifest,
        ),
        (
            User,
            vulnerabilitysuppression.create_vulnerability_suppression_for_org,
            vulnerabilitysuppression.get_vulnerability_suppression_for_org,
        ),
        (
            Repository,
            vulnerabilitysuppression.create_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.get_vulnerability_suppression_for_repo,
        ),
    ],
)
def test_get_vulnerability_suppression(initialized_db, entity, create_func, get_func):
    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]
    create_func(obj, vulns)

    assert get_func(obj) == vulns

@pytest.mark.parametrize(
    "entity, create_func, get_func, delete_func",
    [
        (
            Manifest,
            vulnerabilitysuppression.create_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.get_vulnerability_suppression_for_manifest,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_manifest,
        ),
        (
            User,
            vulnerabilitysuppression.create_vulnerability_suppression_for_org,
            vulnerabilitysuppression.get_vulnerability_suppression_for_org,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_org,
        ),
        (
            Repository,
            vulnerabilitysuppression.create_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.get_vulnerability_suppression_for_repo,
            vulnerabilitysuppression.delete_vulnerability_suppression_for_repo,
        ),
    ],
)
def test_delete_vulnerability_suppression(initialized_db, entity, create_func, get_func, delete_func):
    if entity == Manifest:
        obj = Manifest.get()
    elif entity == User:
        obj = User.get(User.username == "buynlarge")
    elif entity == Repository:
        obj = Repository.get()
    else:
        obj = None

    vulns = ["CVE-2019-100001", "CVE-2019-100002"]
    suppression = create_func(obj, vulns)

    assert suppression.vulnerability_names == vulns

    delete_func(obj)

    assert get_func(obj) == []
