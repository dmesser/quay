"""add vulnerabilitysuppression

Revision ID: 4ac3f51c95ff
Revises: 46980ea2dde5
Create Date: 2023-06-27 21:22:02.719162

"""

# revision identifiers, used by Alembic.
revision = "4ac3f51c95ff"
down_revision = "46980ea2dde5"

import sqlalchemy as sa


def upgrade(op, tables, tester):
    op.create_table(
        "vulnerabilitysuppression",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("manifest_id", sa.Integer(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("vulnerability_names", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_vulnerabilitysuppression")),
        sa.ForeignKeyConstraint(
            ["manifest_id"],
            ["manifest.id"],
            name="fk_vulnerabilitysuppression_manifest_id_manifest",
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repository.id"],
            name="k_vulnerabilitysuppression_repository_id_repository",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["user.id"], name="k_vulnerabilitysuppression_user_id_user"
        ),
        sa.CheckConstraint(
            "((manifest_id IS NULL AND repository_id IS NULL AND organization_id IS NOT NULL) OR "
            "(manifest_id IS NULL AND repository_id IS NOT NULL AND organization_id IS NULL) OR "
            "(manifest_id IS NOT NULL AND repository_id IS NULL AND organization_id IS NULL))",
            name="check_constraints",
        ),
    )

    op.create_index(
        "vulnerabilitysuppression_manifest_id",
        "vulnerabilitysuppression",
        ["manifest_id"],
        unique=True,
    )
    op.create_index(
        "vulnerabilitysuppression_repository_id",
        "vulnerabilitysuppression",
        ["repository_id"],
        unique=True,
    )
    op.create_index(
        "vulnerabilitysuppression_organization_id",
        "vulnerabilitysuppression",
        ["organization_id"],
        unique=True,
    )


def downgrade(op, tables, tester):
    op.drop_table("vulnerabilitysuppression")
