/* eslint-disable react/prop-types */
import {Button, Modal, ModalVariant} from '@patternfly/react-core';
import {useEffect, useState} from 'react';
import ManifestVulnerabilitySuppressions from 'src/components/vulnsuppressions/ManifestVulnerabilitySuppressions';

export function VulnerabilitySuppressionsModal(
  props: VulnerabilitySuppressionsModalProps,
) {
  const [submitted, setSubmitted] = useState<boolean>(false);
  const [success, setSuccess] = useState<boolean>(false);

  const reset = () => {
    props.setIsOpen(false);
    setSubmitted(false);
    setSuccess(false);
  };

  useEffect(() => {
    if (success) {
      reset();
    }
  }, [success]);

  return (
    <Modal
      id="vulnerability-suppression-modal"
      title="Manage vulnerability suppressions"
      description={
        <span>
          Specify vulnerability identifiers to suppress for the manifest this
          tag points to. For example &quot;CVE-2021-44228&quot;. They will match
          any vulnerability identifier that contains the specified string.
        </span>
      }
      isOpen={props.isOpen}
      disableFocusTrap={false}
      key="vuln-supp-modal"
      onClose={reset}
      data-testid="vulnerability-suppression-modal"
      variant={ModalVariant.small}
      actions={[
        <Button
          key="modal-action-button"
          variant="primary"
          onClick={() => {
            setSubmitted(true);
          }}
        >
          Update
        </Button>,
        <Button key="cancel" variant="secondary" onClick={reset}>
          Cancel
        </Button>,
      ]}
    >
      <ManifestVulnerabilitySuppressions
        org={props.org}
        repo={props.repo}
        digest={props.digest}
        isSubmitted={submitted}
        setSuccess={setSuccess}
      />
    </Modal>
  );
}

type VulnerabilitySuppressionsModalProps = {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  org: string;
  repo: string;
  digest: string;
};
