import { ActionGroup, AlertGroup, Button, Flex, Form, FormGroup, Label, Spinner } from "@patternfly/react-core";
import { ReactNode, useEffect, useState } from "react";
import TagsInput, { RenderTagProps } from "react-tagsinput";

export default function VulnerabilitySuppressionInput(props: VulnerabilitySuppressionInputProps) {
    const [isInputValid, setIsInputValid] = useState<boolean>(true);
    const [suppressedVulns, renderSuppressedVulns] = useState<string[]>([]);


    const initialState = () => {
        renderSuppressedVulns(props.suppressedVulnerabilities);
    }

    const handleSubmit = async (event) => {
        event.preventDefault();
        props.setAlerts([]);
        await props.mutator(suppressedVulns);
    };

    const handleReset = async (event) => {
        event.preventDefault();
        props.setAlerts([]);
        initialState();
    }

    const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

    const inputProps = {
        className: inputClassName,
        placeholder: 'Add a CVE',
        spellCheck: 'false',
        id: 'tags-input',
        ['data-test']: 'tags-input',
    };

    const pasteSplit = (data: string) => {
        return data.split(/[\s,;]+/).map((tag) => tag.trim());
    }

    const renderTag = (props: RenderTagProps) => {
        let { tag, key, disabled, onRemove, classNameRemove, getTagDisplayValue, ...other } = props
        return (
            <Label
                className='co-label tag-item-content'
                key={key}
                onClose={() => onRemove(key)}

            >
                {getTagDisplayValue(tag)}
            </Label>
        );
    };

    const updateTags = async (tags) => {
        renderSuppressedVulns(tags);
        setIsInputValid(true);
    };

    useEffect(() => {
        initialState();
    }, []);

    return (
        <Form id="form-form" maxWidth="70%">
            <FormGroup
                isInline
                label="Vulnerability Suppressions"
                fieldId="form-vulnerability-suppressions"
                helperText={props.helperText ? props.helperText : 'Enter CVE identifiers to suppress'}
            >
                <div className="tags-input">
                    <TagsInput
                        value={suppressedVulns}
                        className="tags"
                        addKeys={[9, 13, 32]}
                        removeKeys={[8]}
                        inputProps={inputProps}
                        renderTag={renderTag}
                        onChange={updateTags}
                        onlyUnique={true}
                        validationRegex={/^[^\s]+$/}
                        onValidationReject={() => setIsInputValid(false)}
                        pasteSplit={pasteSplit}
                        addOnBlur
                        addOnPaste
                    />
                </div>
            </FormGroup>

            <ActionGroup>
                <Flex
                    justifyContent={{ default: 'justifyContentFlexEnd' }}
                    width={'100%'}
                >
                    <Button
                        variant="primary"
                        type="submit"
                        onClick={(event) => handleSubmit(event)}
                        isDisabled={props.loading || !isInputValid}
                    >
                        Save
                    </Button>
                    <Button
                        variant="secondary"
                        type="reset"
                        onClick={(event) => handleReset(event)}
                        isDisabled={props.loading}
                    >
                        Reset
                    </Button>
                    {props.loading && <Spinner size="md" className="pf-u-ml-md" />}
                </Flex>
            </ActionGroup>
            <AlertGroup isLiveRegion>
                {props.alerts}
            </AlertGroup>
        </Form>
    );
};

interface VulnerabilitySuppressionInputProps {
    suppressedVulnerabilities: string[];
    mutator: (suppressions: string[]) => Promise<void>;
    loading: boolean;
    alerts: ReactNode[];
    setAlerts: (alerts: ReactNode[]) => void;
    helperText?: string;
}