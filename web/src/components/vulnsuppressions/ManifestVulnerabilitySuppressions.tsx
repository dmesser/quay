import {Alert, Label, Skeleton} from '@patternfly/react-core';
import TagsInput from 'react-tagsinput';
import FormError from '../errors/FormError';

import isEqual from 'lodash/isEqual';
import {useEffect, useState} from 'react';
import {RenderTagProps} from 'react-tagsinput';
import {useRecoilState} from 'recoil';
import {securityDetailsCallStateSelector} from 'src/atoms/SecurityDetailsState';
import {useManifestVulnerabilitySuppressions} from 'src/hooks/UseVulnerabilitySuppressions';
import {addDisplayError} from 'src/resources/ErrorHandling';
import {setManifestVulnerabilitySuppressions} from 'src/resources/TagResource';

export default function ManifestVulnerabilitySuppressions(
  props: ManifestVulnerabilitySuppressionsProps,
) {
  const [err, setErr] = useState<string>();
  const [isInputValid, setIsInputValid] = useState<boolean>(true);
  const [suppressedVulns, setSuppressedVulns] = useState<string[]>([]);
  const [reloadGlobalData, setReloadGlobalData] = useRecoilState(
    securityDetailsCallStateSelector(props.digest),
  );

  const {
    suppressions,
    loadingSuppressions,
    errorLoadingSuppressions,
    errorLoaddingSuppressionsDetails,
  } = useManifestVulnerabilitySuppressions(props.org, props.repo, props.digest);

  useEffect(() => {
    if (suppressions && !isEqual(suppressions, suppressedVulns)) {
      setSuppressedVulns(suppressions);
    }
  }, [suppressions]);

  const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

  const inputProps = {
    className: inputClassName,
    placeholder: 'Add a CVE',
    spellCheck: 'false',
    id: 'tags-input',
    ['data-test']: 'tags-input',
  };

  const pasteSplit = (data: string) => {
    return data.split(/[\s,;]+/).map((tag) => tag.trim());
  };

  const renderTag = (props: RenderTagProps) => {
    // eslint-disable-next-line react/prop-types
    const {tag, key, onRemove, getTagDisplayValue} = props;
    return (
      <Label
        className="co-label tag-item-content"
        key={key}
        onClose={() => onRemove(key)}
      >
        {getTagDisplayValue(tag)}
      </Label>
    );
  };

  const updateTags = (tags) => {
    setSuppressedVulns(tags);
    setIsInputValid(true);
  };

  useEffect(() => {
    if (props.isSubmitted && isInputValid) {
      updateVulnerabilitySuppressions();
    }
  }, [props.isSubmitted]);

  const updateVulnerabilitySuppressions = async () => {
    try {
      await setManifestVulnerabilitySuppressions(
        props.org,
        props.repo,
        props.digest,
        suppressedVulns,
      );
      setReloadGlobalData(!reloadGlobalData);
      props.setSuccess(true);
    } catch (err: any) {
      setErr(
        addDisplayError('Failed to update vulnerability suppressions', err),
      );
    }
  };

  return (
    <>
      <Skeleton hidden={!loadingSuppressions} width="100%" />
      {errorLoadingSuppressions && (
        <Alert
          isInline
          variant="danger"
          title={addDisplayError(
            'Failed to load vulnerability suppressions',
            errorLoaddingSuppressionsDetails,
          )}
        />
      )}

      {!errorLoadingSuppressions && !loadingSuppressions && (
        <>
          <FormError message={err} setErr={setErr} />
          <div className="tags-input">
            <TagsInput
              value={suppressedVulns}
              className="tags"
              addKeys={[9, 13, 32]}
              removeKeys={[8]}
              inputProps={inputProps}
              renderTag={renderTag}
              onChange={updateTags}
              onlyUnique={true}
              validationRegex={/^[^\s]+$/}
              onValidationReject={() => setIsInputValid(false)}
              pasteSplit={pasteSplit}
              addOnBlur
              addOnPaste
            />
          </div>
        </>
      )}
    </>
  );
}

interface ManifestVulnerabilitySuppressionsProps {
  org: string;
  repo: string;
  digest: string;
  isSubmitted: boolean;
  setSuccess: React.Dispatch<React.SetStateAction<boolean>>;
}
