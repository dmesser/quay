import { useMutation, useQueryClient } from '@tanstack/react-query';
import { AxiosError } from 'axios';
import { setOrganizationVulnerabilitySuppressions } from 'src/resources/OrganizationResource';

interface UseOrganizationVulnerabilitySuppressionsOptions {
  org: string;
  onSuccess?: (result: Response) => void;
  onError?: (err: AxiosError) => void;
}

export function useOrganizationVulnerabilitySuppressions(options: UseOrganizationVulnerabilitySuppressionsOptions) {
  const {
    org,
    onSuccess = () => { },
    onError = () => { },
  } = options;

  const queryClient = useQueryClient();
  const mutator = useMutation(
    async (suppressions: string[]): Promise<Response> => {
      return await setOrganizationVulnerabilitySuppressions(org, suppressions)
    },
    {
      onSuccess: (result: Response) => {
        queryClient.invalidateQueries(['organization', org]);
        onSuccess(result);
      },
      onError: (err: AxiosError) => {
        onError(err);
      },
    },
  );

  return {
    setSuppressions: async (suppressions: string[]) => mutator.mutate(suppressions),
    loading: mutator.isLoading,
    error: mutator.isError,
  };
}
