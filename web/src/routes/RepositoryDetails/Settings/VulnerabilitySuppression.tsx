import {
  ActionGroup,
  Alert,
  AlertGroup,
  Button,
  Flex,
  Form,
  FormGroup,
  Label,
  Spinner
} from '@patternfly/react-core';
import { AxiosError } from 'axios';
import { ReactNode, useEffect, useState } from 'react';
import TagsInput, { RenderTagProps } from 'react-tagsinput';
import { useRecoilValue, useSetRecoilState } from 'recoil';
import { SecurityDetailsCallStates, securityDetailsCallStatesInverter } from 'src/atoms/SecurityDetailsState';
import { useRepositoryVulnerabilitySuppressions } from 'src/hooks/UseRepositoryVulnerabilitySuppressions';
import { addDisplayError } from 'src/resources/ErrorHandling';
import { RepositoryDetails } from 'src/resources/RepositoryResource';

export default function VulnerabilitySuppression(props: VulnerabilitySuppressionProps) {
  const [isInputValid, setIsInputValid] = useState<boolean>(true);
  const [suppressedVulns, renderSuppressedVulns] = useState<string[]>([]);
  const [alerts, setAlerts] = useState<ReactNode[]>([]);
  const securityDetailsCallStates = useRecoilValue(SecurityDetailsCallStates);
  const resetSecurityDetailsCalls = useSetRecoilState(securityDetailsCallStatesInverter(securityDetailsCallStates));

  const {
    setSuppressions: updateVulnerabilitySuppressions,
    loading: loadingSetSuppressions,
    error: _,
  } = useRepositoryVulnerabilitySuppressions({
    org: props.org,
    repo: props.repo,
    onSuccess: (_) => {
      setAlerts(prevAlerts => {
        return [...prevAlerts,
        <Alert key="alert" variant="success" title="Successfully updated vulnerability suppressions" isInline={true} timeout={2000} />
        ]
      });

      resetSecurityDetailsCalls([true]);
    },
    onError: (error: AxiosError) => {
      setAlerts(prevAlerts => {
        return [...prevAlerts,
        <Alert key="alert" variant="danger" title="Error">
          {addDisplayError("Unable to update vulnerability suppressions", error)}
        </Alert>
        ]
      });
    },
  }
  );

  const initialState = () => {
    renderSuppressedVulns(props.repoDetails.suppressed_vulnerabilities ? props.repoDetails.suppressed_vulnerabilities : []);
  }

  const handleSubmit = async (event) => {
    event.preventDefault();
    setAlerts([]);
    await updateVulnerabilitySuppressions(suppressedVulns);
  };

  const handleReset = async (event) => {
    event.preventDefault();
    setAlerts([]);
    initialState();
  }

  const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

  const inputProps = {
    className: inputClassName,
    placeholder: 'Add a CVE',
    spellCheck: 'false',
    id: 'tags-input',
    ['data-test']: 'tags-input',
  };

  const pasteSplit = (data: string) => {
    return data.split(/[\s,;]+/).map((tag) => tag.trim());
  }

  const renderTag = (props: RenderTagProps) => {
    let { tag, key, disabled, onRemove, classNameRemove, getTagDisplayValue, ...other } = props
    return (
      <Label
        className='co-label tag-item-content'
        key={key}
        onClose={() => onRemove(key)}

      >
        {getTagDisplayValue(tag)}
      </Label>
    );
  };

  const updateTags = async (tags) => {
    renderSuppressedVulns(tags);
    setIsInputValid(true);
  }

  useEffect(() => {
    initialState();
  }, []);

  return (
    <Form>
      <FormGroup
        isInline
        label="Vulnerability Suppressions"
        fieldId="form-vulnerability-suppressions"
        helperText='Specify vulnerabibility identifiers to suppress for any image in this repository. For example "CVE-2021-44228". They will match any vulnerability identifier that contains the specified string. You can also paste space or comma separated values. Any suppression defined here will be applied to all images in this repository.'
      >
        <div className="tags-input">
          <TagsInput
            value={suppressedVulns}
            className="tags"
            addKeys={[9, 13, 32]}
            removeKeys={[8]}
            inputProps={inputProps}
            renderTag={renderTag}
            onChange={updateTags}
            onlyUnique={true}
            validationRegex={/^[^\s]+$/}
            onValidationReject={() => setIsInputValid(false)}
            pasteSplit={pasteSplit}
            addOnBlur
            addOnPaste
          />
        </div>
      </FormGroup>

      <ActionGroup>
        <Flex
          justifyContent={{ default: 'justifyContentFlexEnd' }}
          width={'100%'}
        >
          <Button
            variant="primary"
            type="submit"
            onClick={(event) => handleSubmit(event)}
            isDisabled={loadingSetSuppressions || !isInputValid}
          >
            Save
          </Button>
          <Button
            variant="secondary"
            type="reset"
            onClick={(event) => handleReset(event)}
            isDisabled={loadingSetSuppressions}
          >
            Reset
          </Button>
          {loadingSetSuppressions && <Spinner size="md" className="pf-u-ml-md" />}
        </Flex>
      </ActionGroup>
      <AlertGroup isLiveRegion>
        {alerts}
      </AlertGroup>
    </Form>
  );

}

interface VulnerabilitySuppressionProps {
  org: string;
  repo: string;
  repoDetails: RepositoryDetails;
}
