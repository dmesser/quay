import {
  Button,
  Label,
  Modal,
  ModalVariant
} from '@patternfly/react-core';
import { useEffect, useState } from 'react';
import TagsInput, { RenderTagProps } from 'react-tagsinput';
import { useRecoilState } from 'recoil';
import { securityDetailsCallStateSelector } from 'src/atoms/SecurityDetailsState';
import FormError from 'src/components/errors/FormError';
import { addDisplayError } from 'src/resources/ErrorHandling';
import { ManifestVulnerabilitySuppressionsResponse, getManifestVulnerabilitySuppressions, setManifestVulnerabilitySuppressions } from 'src/resources/TagResource';

export function VulnerabilitySuppressionsModal(props: VulnerabilitySuppressionsModalProps) {
  const [err, setErr] = useState<string>();
  const [isInputValid, setIsInputValid] = useState<boolean>(true);
  const [suppressedVulns, setSuppressedVulns] = useState<string[]>([]);
  const [reloadGlobalData, setReloadGlobalData] = useRecoilState(securityDetailsCallStateSelector(props.digest));

  const inputClassName = isInputValid ? 'input' : 'input invalid-tag';

  const inputProps = {
    className: inputClassName,
    placeholder: 'Add a CVE',
    spellCheck: 'false',
    id: 'tags-input',
    ['data-test']: 'tags-input',
  };

  const pasteSplit = (data: string) => {
    return data.split(/[\s,;]+/).map((tag) => tag.trim());
  }

  const renderTag = (props: RenderTagProps) => {
    let { tag, key, disabled, onRemove, classNameRemove, getTagDisplayValue, ...other } = props
    return (
      <Label
        className='co-label tag-item-content'
        key={key}
        onClose={() => onRemove(key)}

      >
        {getTagDisplayValue(tag)}
      </Label>
    );
  };

  const updateTags = (tags, changed) => {
    setSuppressedVulns(tags);
    setIsInputValid(true);
  }

  useEffect(() => {
    (async () => {
      if (!props.isOpen) {
        return;
      }

      const suppressedVulnerabilitiesResponse: ManifestVulnerabilitySuppressionsResponse = await getManifestVulnerabilitySuppressions(props.org, props.repo, props.digest);

      if (suppressedVulnerabilitiesResponse) {
        setSuppressedVulns(suppressedVulnerabilitiesResponse.suppressed_vulnerabilities);
      }
    })();
  }, [props.isOpen]);

  const updateVulnerabilitySuppressions = async () => {
    try {
      await setManifestVulnerabilitySuppressions(props.org, props.repo, props.digest, suppressedVulns);
      props.setIsOpen(false);
      setReloadGlobalData(!reloadGlobalData);
    } catch (err: any) {
      setErr(addDisplayError('Failed to update vulnerability suppressions', err));
    }
  }

  return (
    <>
      <Modal
        id="vulnerability-suppression-modal"
        title="Manage vulnerabibility suppressions"
        description={
          <span>
            Specify vulnerabibility identifiers to suppress for this manifest. For example "CVE-2021-44228". They will match any vulnerability identifier that contains the specified string.
          </span>
        }
        isOpen={props.isOpen}
        disableFocusTrap={false}
        key="vuln-supp-modal"
        onClose={() => { props.setIsOpen(false); }}
        data-testid="vulnerability-suppression-modal"
        variant={ModalVariant.small}
        actions={[
          <Button
            key="modal-action-button"
            variant="primary"
            onClick={updateVulnerabilitySuppressions}
          >
            Update
          </Button>,
          <Button
            key="cancel"
            variant="secondary"
            onClick={() => { props.setIsOpen(false); setErr(undefined); }}
          >
            Cancel
          </Button>,
        ]}
      >
        <FormError message={err} setErr={setErr} />
        <div className="tags-input">
          <TagsInput
            value={suppressedVulns}
            className="tags"
            addKeys={[9, 13, 32]}
            removeKeys={[8]}
            inputProps={inputProps}
            renderTag={renderTag}
            onChange={updateTags}
            onlyUnique={true}
            validationRegex={/^[^\s]+$/}
            onValidationReject={() => setIsInputValid(false)}
            pasteSplit={pasteSplit}
            addOnBlur
            addOnPaste
          />
        </div>
      </Modal>
    </>
  );
}

type VulnerabilitySuppressionsModalProps = {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  org: string;
  repo: string;
  digest: string;
};